# Импортируем из модуля tkinter все его элементы.
from tkinter import *
# Импортируем из модуля tkinter элемент
# simpledialog и присваиваем ему псевдоним sd
from tkinter import simpledialog as sd
# Из модуля tkinter импортируем элемент
# messagebox и присваиваем ему псевдоним mb.
from tkinter import messagebox as mb
# Импортируем модуль datetime
# для работы со временем.
import datetime
# Для проигрывания музыки
# импортируем модуль pygame
import pygame
# Модуль для работы со временем.
import time

# Глобальная переменная времени.
t = 0
# Глобальная переменная для
# отслеживания проигрывания музыки
music = False
# Глобальная переменная с напоминанием,
# которое ввел пользователь.
reminder_text = ''


# Функция установки напоминания.
def set_reminder():
    # Объявляем глобальные переменные.
    global t, reminder_text
    # Вызываем диалоговое окно, чтобы
    # пользователь мог ввести время напоминания.
    rem_time = sd.askstring("Время напоминания", "Введите время напоминания в формате ЧЧ:ММ (в 24-часовом формате):")
    # Делаем проверку, чтобы ввод не был пустым.
    if rem_time:
        # Для обработки возможных ошибок.
        try:
            # Получаем часы введенные пользователем.
            hour = int(rem_time.split(":")[0])
            # Получаем минуты.
            minute = int(rem_time.split(":")[1])
            # Получаем текущую дату и время.
            now = datetime.datetime.now()
            # Заменяем в полученном времени часы
            # и минуты, на введенные пользователем.
            # Так же обнуляем секунды.
            dt = now.replace(hour=hour, minute=minute, second=0)
            # Получаем временную метку.
            t = dt.timestamp()
            # Создаем диалоговое окно с
            # просьбой ввести текст напоминания.
            reminder_text = sd.askstring("Текст напоминания", "Введите текст напоминания:")
            # Меняем текст в первом поле.
            # Выводим время напоминания.
            label_1.config(text=f"Напоминание на {hour:02}:{minute:02} с текстом:")
            # Во втором поле, показываем текст напоминания.
            label_2.config(text=f"{reminder_text}")
        # Обрабатываем возникающие ошибки.
        except Exception as e:
            # В случае возникновения возможной ошибки,
            # выводим информационное окно,
            # с описанием ошибки.
            mb.showerror("Ошибка!", f"Произошла ошибка: {e}")


# Функция проверки времени,
# для срабатывания напоминания.
def check():
    # Объявляем глобальные переменные.
    global t, reminder_text
    #  Если переменная t не пустая.
    if t:
        # Получаем текущее время.
        now = time.time()
        # Сравниваем время нашего
        # напоминания и текущее время.
        if now >= t:
            # Если время больше или равно,
            # времени нашего напоминания,
            # тогда включаем музыку напоминания.
            play_snd()
            # Так же выводим информационное
            # окно с текстом напоминания.
            mb.showinfo('Напоминание', f'{reminder_text}')
            # И присваиваем переменной t 0
            t = 0
    # Вызываем функцию снова, через 10 секунд.
    # Функция check получилась, рекурсивной функцией.
    window.after(10000, check)


# Функция для проигрывания
# музыки напоминания.
def play_snd():
    # Объявляем глобальные переменные.
    global music
    # Присваиваем переменной music значение True.
    music = True
    # Инициализируем музыкальный проигрыватель.
    pygame.mixer.init()
    # Загружаем мелодию напоминания.
    pygame.mixer.music.load("reminder.mp3")
    # Включаем проигрывание музыки.
    pygame.mixer.music.play()


# Функция остановки проигрывания
# музыки напоминания.
def stop_music():
    # Объявляем глобальную переменную.
    global music
    #  Делаем проверку, чтобы
    #  переменная была не пустая.
    if music:
        # Если переменная не пустая, тогда
        # останавливаем проигрывание музыки.
        pygame.mixer.music.stop()
        # Присваиваем переменной значение False.
        music = False
    # В первом поле спрашиваем пользователя; "установить новое напоминание?"
    label_1.config(text="Установить новое напоминание?")
    # Очищаем второе поле.
    label_2.config(text="")


# Создание окна программы.
window = Tk()
# Название окна программы.
window.title("Напоминание")
# Первое поле с просьбой установить напоминание.
label_1 = Label(text="Установите напоминание", font=("Arial", 14))
# Упаковываем первое поле,
# с отступами по горизонтали и вертикали.
label_1.pack(padx=10, pady=10)
# Второе поле. Сюда будет выводиться
# текст напоминания введённый пользователем.
label_2 = Label(text="", font=("Arial", 14))
# Упаковываем второе поле,
# с отступами по горизонтали и вертикали.
label_2.pack(padx=10, pady=10)
# Кнопка установить напоминание.
set_button = Button(text="Установить напоминание", command=set_reminder)
# Упаковываем кнопку
# установить напоминание.
set_button.pack(pady=10)
# Кнопка для остановки
# проигрывания музыки напоминания.
stop_button = Button(text="Остановить музыку", width=23, command=stop_music)
# Упаковываем кнопку.
stop_button.pack(padx=10, pady=10)
# Кнопка "Выход"
exit_button = Button(text='Выход', command=window.destroy)
# Упаковываем кнопку "Выход".
# Кнопку устанавливаем в правом нижнем углу, окна программы.
# С отступами по горизонтали и вертикали.
exit_button.pack(side=RIGHT, padx=10, pady=10)
# Вызов функции.
# Функция проверки времени,
# для срабатывания напоминания.
check()
# Вызов главного цикла программы.
window.mainloop()
